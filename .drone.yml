---
kind: pipeline
type: kubernetes
name: new-commit
trigger:
  ref:
    - refs/heads/main
steps:
  - name: test
    image: alpine
    commands:
      - env | sort

  - name: pylint
    image: python:3.9
    commands:
      - python -m pip install poetry --user
      - python -m poetry install
      - python -m poetry run pre-commit run -a

  - name: build
    image: python:3.9
    volumes:
      - name: dist
        path: ./dist
    cache_from: docker.asci.synchrotron.org.au/${DRONE_REPO,,}:main
    tag: main
    mtu: 1480
    commands:
      - python -m pip install poetry --user
      - echo Building...
      - python -m poetry build
    #   - echo Running tests...
    #   - python -m poetry install
    #   - python -m poetry run pytest --cov=mx3_beamline_library --html=artifacts/testing/index.html
    #   - python -m poetry run pytest --cov-report=html:artifacts/coverage --cov=mx3_beamline_library

  - name: upload-artifacts
    image: plugins/s3
    settings:
      bucket: cicd
      source: artifacts/**/*
      target: /artifacts/${DRONE_REPO,,}/${DRONE_BUILD_NUMBER}/
      path_style: true
      strip_prefix: artifacts/
      endpoint:
        from_secret: s3ApiServer
      access_key: cicd
      secret_key:
        from_secret: s3cicdKey

  - name: publish-package
    image: plugins/pypi
    volumes:
      - name: dist
        path: ./dist
    settings:
      username:
        from_secret: pypiUsername
      password:
        from_secret: pypiPassword
      repository: https://pypi.asci.synchrotron.org.au/mx3/dev
      distributions:
        - sdist
        - bdist_wheel
      skip_build: true

  - name: notify-package-upload
    image: alpine
    when:
      status: [success, failure]
    environment:
      ROCKET_CI_CHANNEL:
        from_secret: rocketCIChannel
      PYPI_SERVER:
        from_secret: pypiServer
      S3_API_SERVER:
        from_secret: s3ApiServer
    commands:
      - export FORMAT_MSG=$(printf _"$DRONE_COMMIT_MESSAGE"_ | sed ':a;N;$!ba;s/\n/ \\\n /g')
      - |
        head -c -1 << EOF > .template.json
        {
          "channel": "$ROCKET_CI_CHANNEL",
          "text": "Build ${DRONE_BUILD_NUMBER} of **${DRONE_REPO,,} (${DRONE_BRANCH})** is a [{{build.status}}](${DRONE_BUILD_LINK}) {{#success build.status}} :tada: {{else}} :exclamation: {{/success}}",
          "attachments": [
            {
              "author_name": "${DRONE_COMMIT_AUTHOR_NAME}",
              "fields": [
              {
                "short": false,
                "title": "",
                "value": "$FORMAT_MSG"
              },
              {
                "short": false,
                "title": "",
                "value": "{{#success build.status}} Uploaded to the [pypi]($PYPI_SERVER/mx3/dev/${DRONE_REPO_NAME,,}/latest) repository. \n The [Coverage Report]($S3_API_SERVER/cicd/artifacts/${DRONE_REPO,,}/${DRONE_BUILD_NUMBER}/coverage/index.html), [Pytest Report]($S3_API_SERVER/cicd/artifacts/${DRONE_REPO,,}/${DRONE_BUILD_NUMBER}/testing/index.html) {{else}} Please check the commit and/or infrastructure. {{/success}}"
              }
            ],
            "color": "{{#success build.status}} #30b886 {{else}} #a30100 {{/success}}"
            }
          ]
        }
        EOF

  - name: chat-notify
    image: plugins/webhook
    when:
      status: [success, failure]
    settings:
      urls:
        from_secret: rocketCIWebhook
      content_type: application/json
      template: file:///drone/src/.template.json

volumes:
  - name: dist
    temp: {}
---
kind: pipeline
type: kubernetes
name: new-release
trigger:
  ref:
    - refs/tags/*
steps:
  - name: test
    image: alpine
    commands:
      - env | sort

  - name: pylint
    image: python:3.9
    commands:
      - python -m pip install poetry --user
      - python -m poetry install
      - python -m poetry run pre-commit run --all-files

  - name: build
    image: python:3.9
    volumes:
      - name: dist
        path: ./dist
    cache_from: docker.asci.synchrotron.org.au/${DRONE_REPO,,}:main
    tag: main
    mtu: 1480
    commands:
      - python -m pip install poetry --user
      - echo Building...
      - python -m poetry build
      - echo Building docs...
      - python -m poetry install

  - name: publish-package
    image: plugins/pypi
    volumes:
      - name: dist
        path: ./dist
    settings:
      username:
        from_secret: pypiUsername
      password:
        from_secret: pypiPassword
      repository: https://pypi.asci.synchrotron.org.au/mx3/prod
      distributions:
        - sdist
        - bdist_wheel
      skip_build: true

  - name: notify-package-release
    image: alpine
    when:
      status: [success, failure]
    environment:
      ROCKET_CI_CHANNEL:
        from_secret: rocketCIChannel
      PYPI_SERVER:
        from_secret: pypiServer
      S3_API_SERVER:
        from_secret: s3ApiServer
    commands:
      - export FORMAT_MSG=$(echo _"$DRONE_COMMIT_MESSAGE"_ | sed ':a;N;$!ba;s/\n/ \\\n /g')
      - |
        head -c -1 << EOF > .template.json
        {
          "channel": "$ROCKET_CI_CHANNEL",
          "text": "Build ${DRONE_BUILD_NUMBER} of **${DRONE_REPO,,} (${DRONE_BRANCH})** is a [{{build.status}}](${DRONE_BUILD_LINK}) {{#success build.status}} :tada: {{else}} :exclamation: {{/success}}",
          "attachments": [
            {
              "author_name": "${DRONE_COMMIT_AUTHOR_NAME}",
              "fields": [
              {
                "short": false,
                "title": "",
                "value": "$FORMAT_MSG"
              },
              {
                "short": false,
                "title": "",
                "value": "{{#success build.status}} Published to the [pypi]($PYPI_SERVER/mx3/prod/${DRONE_REPO_NAME,,}/${DRONE_BRANCH}) repository {{else}} Please check the commit and/or infrastructure. {{/success}}"
              }
            ],
            "color": "{{#success build.status}} #30b886 {{else}} #a30100 {{/success}}"
            }
          ]
        }
        EOF

  - name: chat-notify
    image: plugins/webhook
    when:
      status: [success, failure]
    settings:
      urls:
        from_secret: rocketCIWebhook
      content_type: application/json
      template: file:///drone/src/.template.json

volumes:
  - name: dist
    temp: {}
---
kind: secret
name: rocketCIWebhook
get:
  path: asci-cicd-prod
  name: rocketCIWebhook
---
kind: secret
name: rocketCIChannel
get:
  path: asci-cicd-prod
  name: mxCIChannel
---
kind: secret
name: pypiServer
get:
  path: asci-cicd-prod
  name: pypiServer
---
kind: secret
name: pypiUsername
get:
  path: asci-cicd-prod
  name: pypiUsername
---
kind: secret
name: pypiPassword
get:
  path: asci-cicd-prod
  name: pypiPassword
---
kind: secret
name: s3ApiServer
get:
  path: asci-cicd-prod
  name: s3ApiServer
---
kind: secret
name: s3cicdKey
get:
  path: asci-cicd-prod
  name: s3cicdKey
